const { leftMargin } = require('./configuration');
const configuration = require('./configuration');
const imageSizeOf = require('image-size');
const { Utils } = require('./Utils');

class Appendix extends Utils{
    constructor({pdf, appendixes, index}) {
        super({pdf});
        this.render(appendixes, index)
    }

    renderAppendix(appendix, index, indexPrefix, appendixOutline){
        let startX = this.pdf.x;
        let startY = this.pdf.y;

        const headerValue =  `${indexPrefix}${index} ${appendix.title}`;
        appendixOutline.addItem(headerValue);
        
        this.pdf.fillColor(configuration.color.subHeader).font(configuration.font.bold).fontSize(configuration.size.font.title).text(headerValue, { align: 'left' });
        this.pdf.moveDown();

        this.pdf.fillColor(configuration.color.regular).font(configuration.font.regular).fontSize(configuration.size.font.regular);
        this.pdf.text(`${appendix.description}`, { align: 'justify' });
        this.pdf.moveDown();

        this.pdf.fillColor(configuration.color.regular).font(configuration.font.bold).fontSize(configuration.size.font.regular).text(`Evidence of the defect:`, { align: 'left' });
        this.pdf.moveDown();

        this.pdf.fillColor(configuration.color.regular).font(configuration.font.regular).fontSize(configuration.size.font.regular);
        for(const poc of appendix.poc){

            let pocHeight = 0;
            const titlePresent = poc.title && poc.title !== "";
            const descriptionPresent = poc.description && poc.description !== "";
            if(titlePresent){
                pocHeight += this.pdf.heightOfString(`${poc.title}`);
            }
            if(descriptionPresent){
                pocHeight += this.pdf.heightOfString(`${poc.description}`);
            }
            this.checkNewPage(pocHeight);

            if(titlePresent){
                this.pdf.fillColor(configuration.color.regular).font(configuration.font.boldItalic).fontSize(configuration.size.font.regular);
                this.pdf.text(`${poc.title}`, { align: 'left' });
                this.pdf.fillColor(configuration.color.regular).font(configuration.font.regular).fontSize(configuration.size.font.regular);
            }
            if(descriptionPresent){
                this.pdf.text(`${poc.description}`, { align: 'justify' });
            }

            for(const figure of poc.figures){
                const dimensions = imageSizeOf(figure.figure);
                const imageRenderedHeight = dimensions.height/dimensions.width * configuration.size.pocImage.width;
                pocHeight = 0;
                pocHeight += this.pdf.heightOfString(`${figure.description}`);
                pocHeight += imageRenderedHeight;
                pocHeight += this.pdf.currentLineHeight(); // For movedown
                pocHeight += this.pdf.currentLineHeight(); // For movedown

                this.checkNewPage(pocHeight);

                this.pdf.text(`${figure.description}`, { align: 'justify' });
                this.pdf.moveDown();
                let imageX = configuration.pageWidth - configuration.size.pocImage.width - configuration.margins.left - configuration.margins.right;
                this.pdf.image(figure.figure, this.pdf.x + imageX/2, this.pdf.y, {width: configuration.size.pocImage.width}).stroke();

                this.pdf.y += imageRenderedHeight;
                
                this.pdf.moveDown();
            }
        }
        // ------------------------------ POC: END -----------------------------------
    }

    renderAppendixList(appendixes, appendixOutline, indexPrefix) {
        let appendixIndex = 0;
        appendixes.forEach((appendix, index) => {
            appendixIndex++;
            this.renderAppendix(appendix, appendixIndex, indexPrefix, appendixOutline);
            if(index+1 < appendixes.length){
                this.addNewPage();
            }
        });
        return true;
    }

    render(appendixes, index){
        this.addNewPage();
        const { outline } = this.pdf;
        const appendixValue = `${index} Appendix`;
        const appendixOutline = outline.addItem(appendixValue);
        this.pdf.fillColor(configuration.color.title).font(configuration.font.bold).fontSize(configuration.size.font.header).text(appendixValue, { align: 'left' });
        this.pdf.moveDown();
        this.renderAppendixList(appendixes, appendixOutline, `${index}. `)
    }
}

module.exports = {
    Appendix: Appendix,
}