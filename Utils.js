const { leftMargin } = require('./configuration');
const configuration = require('./configuration');
const imageSizeOf = require('image-size');

class Utils {
    constructor({pdf}) {
      this.pdf = pdf;
    }


    checkNewPage(offset){
        const bottomPoint = configuration.pageHeight - configuration.margins.bottom;
        if(bottomPoint < (this.pdf.y + offset)){
            this.addNewPage();
            return true
        }
        return false;
    };

    addNewPage(){
        this.pdf.addPage({
            size: 'A4',
            info: {
                Title: 'Report',
                Author: '',
            },
            margins: JSON.parse(JSON.stringify(configuration.margins))
        });
        return true;
    }

    // addToc(toc, content){
    //     const currentPage = this.getCurrentPageNumber();
    //     toc.push({
    //         'content': content,
    //         'pageNumber': currentPage
    //     });
    //     console.log(toc)
    // }

    getCurrentPageNumber() {
        const pageBuffer= this.pdf._pageBuffer;
        const currentPage = this.pdf.page
        let currentPageNumber = null
        pageBuffer.forEach((page, i) => {
          if (page === currentPage) {
            currentPageNumber = i + 1;
          }
        })
        if (currentPageNumber === null) {
          throw new Error('Unable to get current page number')
        }
        return currentPageNumber
    }

    getPageNumberByPage(pageId = this.pdf.page.id) {
        const pageBuffer= this.pdf._pageBuffer;
        let currentPageNumber = null
        pageBuffer.forEach((page, i) => {
            if (page.dictionary.id === pageId) {
                currentPageNumber = i + 1;
            }
        })
        if (currentPageNumber === null) {
          throw new Error('Unable to get current page number')
        }
        return currentPageNumber
    }

    tableRow({
        key,
        value,
        keyColor=configuration.color.regular,
        valueColor=configuration.color.regular,
        font= configuration.font.regular,
        firstColumnWidth=configuration.size.table.firstColumnWidth,
    }){
        let startX = this.pdf.x;
        let startY = this.pdf.y;
        this.pdf.font(font).fontSize(configuration.size.font.regular);

        const tableWidth = configuration.pageWidth - configuration.margins.left - configuration.margins.right;
        const valueColumnWidth = tableWidth - configuration.size.table.paddingLeft -configuration.size.table.paddingLeft - firstColumnWidth;
        let heightOfString = this.pdf.heightOfString(value, { width: valueColumnWidth }) + configuration.size.table.paddingTop;
        this.pdf.lineJoin('bevel').rect(startX, startY, tableWidth, heightOfString).stroke();

        this.pdf.fillColor(keyColor);
        this.pdf.text(`${key}`, startX + configuration.size.table.paddingLeft, startY + configuration.size.table.paddingTop, { align: 'justify' });

        this.pdf.fillColor(valueColor);
        this.pdf.text(`${value}`, startX + configuration.size.table.paddingLeft + firstColumnWidth, startY + configuration.size.table.paddingTop, { align: 'justify', width:  valueColumnWidth });

        this.pdf.x = startX;
    }
}

module.exports = {
    Utils: Utils,
}