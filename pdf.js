const fs = require('fs');
const PDFDocument = require('pdfkit');

const SVGtoPDF = require('svg-to-pdfkit');

PDFDocument.prototype.addSVG = function(svg, x, y, options) {
  return SVGtoPDF(this, svg, x, y, options), this;
};

const { Vulnerabilities } = require('./Vulnerabilities');
const configuration = require('./configuration');
const {Utils} = require('./Utils');
const {Appendix} = require('./Appendix');
const {ReportSections} = require('./ReportSections');


async function generatePDF() {
  //A4 (595.28 x 841.89)
  let pdf = new PDFDocument({
    bufferPages: true,
    size: 'A4',
    info: {
      Title: 'Report',
      Author: '',
    },
    autoFirstPage: false,
    margins: JSON.parse(JSON.stringify(configuration.margins))
  });
  const utils = new Utils({pdf});
  const rawData = await fs.readFileSync('data.json');
  const data = JSON.parse(rawData);

  const tocJson = await fs.readFileSync('toc.json');
  const tocData = JSON.parse(tocJson);

  // HEADER AND TOC: END
  utils.addNewPage();
  const header = data.introduction.title;
  pdf.y = configuration.pageHeight/2 - configuration.size.font.header;
  pdf.fillColor(configuration.color.header).font(configuration.font.bold).fontSize(configuration.size.font.header).text(header, { align: 'center' });
  let imageX = configuration.pageWidth - configuration.size.logoImage.width - configuration.margins.left - configuration.margins.right;
  pdf.image(data.introduction.logo, pdf.x + imageX/2, pdf.y, {width: configuration.size.logoImage.width}).stroke();
  //----------------------------------- HEADER: END -----------------------------------
  utils.addNewPage();
  const tocValue = "Table Of Contents"
  pdf.fillColor(configuration.color.header).font(configuration.font.bold).fontSize(configuration.size.font.header).text(tocValue, { align: 'left' });
  pdf.moveDown()
  const tableWidth = configuration.pageWidth - configuration.margins.left - configuration.margins.right;
  for (const content of tocData){
    let tocHeight = 0;
    tocHeight += pdf.heightOfString(content['title']);
    utils.checkNewPage(tocHeight);

    utils.tableRow({ 
      key: content['title'],
      value: content['page'],
      firstColumnWidth: tableWidth - configuration.size.table.paddingLeft - 50
    })
    for (const child of content.children){
      let tocHeight = 0;
      tocHeight += pdf.heightOfString(child['title']);
      utils.checkNewPage(tocHeight);
      utils.tableRow({ 
        key: `    ${child['title']}`,
        value: child['page'],
        firstColumnWidth: tableWidth - configuration.size.table.paddingLeft - 50
      })
    }
  }

  await pdf.on('pageAdded', function () {
    pdf.page.margins.bottom = 0; // Workaround for pageAdded - Footer
    pdf.page.margins.top = 0; // Workaround for pageAdded - Header

    pdf.fillColor(configuration.color.regular).font(configuration.font.regular).fontSize(configuration.size.font.regular);
    const footerString = `${data.introduction.footerPageNumberPrefix}${utils.getCurrentPageNumber()}`;
    const footerStringWidth = pdf.widthOfString(footerString);
    pdf.text(footerString, configuration.pageWidth - configuration.margins.left - footerStringWidth - 5, configuration.pageHeight - 20);

    const headerString = data.introduction.header;
    const headerStringWidth = pdf.widthOfString(headerString);
    pdf.text(headerString, configuration.pageWidth - configuration.margins.left - headerStringWidth - 5, 20);

    pdf.x = configuration.margins.left;
    pdf.y = configuration.margins.top;

    pdf.page.margins.top = configuration.margins.top; // Workaround for pageAdded - Header
    pdf.page.margins.bottom = configuration.margins.bottom; // Workaround for pageAdded - Footer
  });

  new ReportSections({pdf, sections: data.reportSections, startingIndex: 1});


  const vulnsOut = new Vulnerabilities({pdf, vulnerabilities: data.vulnerabilities, categorized: true, startingIndex: 4});

  if(data.appendixes){
    new Appendix({pdf, appendixes: data.appendixes, index: vulnsOut.currentIndex});
  }

  const toc = [];
  const pageBuffer= pdf.outline.children;
  pageBuffer.forEach((page, i) => {
    toc[i] = {};
    toc[i]['title'] = page.outlineData.Title.toString();
    toc[i]['page'] = utils.getPageNumberByPage(page.outlineData.Dest[0].id)
    toc[i]['children'] = [];
    page.children.forEach((sub, j) => {
      toc[i]['children'][j] = {};
      toc[i]['children'][j]['title'] = sub.outlineData.Title.toString();
      toc[i]['children'][j]['page'] = utils.getPageNumberByPage(sub.outlineData.Dest[0].id)
    })
  })

  await fs.writeFileSync("toc.json", JSON.stringify(toc));

  await pdf.pipe(
    fs.createWriteStream('out.pdf')
  )
  .on('finish', function () {
  });

  await pdf.end();

  return true
}

// ------ NOTE ------
// need to run trice for toc: Issues with page number
// ------ NOTE ------
(async () => {
  await generatePDF();
  await new Promise(resolve => setTimeout(resolve, 3000)); 
  await generatePDF();
  await new Promise(resolve => setTimeout(resolve, 3000)); 
  await generatePDF();
  console.log('PDF generated');
  return true
})();